class Canvas2D{constructor(t){this.items=[],this.events={},this.isPaused=!1,this.lastEvent=void 0,this.checkSettings(t),this.frameCounter=0,this.startExecution()}checkSettings(t){const e=this;let{background:s,items:i,globalEvents:n}=t;const r=document.getElementById(t.id);e.canvas=(()=>r);const a=r.getContext("2d");e.ctx=a,e.globalEvents=n,i.forEach(t=>{e.registerNewItem(t)}),e.registerNewEvents(),e.adaptFrame()}registerNewItem(t){const e=()=>this;t.origin=e,t.shape.origin=e,t.physics.origin=e,t.events.forEach(t=>t.origin=e),t.belongsTo=(()=>this),this.items.push(new Item2D(t))}registerNewEvents(){const t=this,e=(e,s)=>{void 0===t.events[e]&&(t.events[e]=[],t.canvas().addEventListener(e,t.inputHandler.bind(this))),Array.isArray(t.events[e])&&!t.events[e].includes(s)&&t.events[e].push(s)};t.globalEvents.forEach(t=>{e(t.type,-1)}),t.items.forEach((t,s)=>{t.e.forEach(t=>{e(t.type,s)})})}clearEvents(){}inputHandler(t){this.lastEvent=t;const e=t.type;this.events[e].forEach(t=>{if(t>=0){this.i[t].filterEvents(e).forEach(t=>t.checkIfTriggered())}else this.globalEvents.filter(t=>t.type==e).forEach(t=>t.callback.call(this))})}startExecution(){this.orderOfExecution()}orderOfExecution(){this.adaptFrame(),this.isPaused||this.itemLogic(),this.drawFrame(),requestAnimationFrame(this.orderOfExecution.bind(this)),this.frameCounter++}adaptFrame(){const t=this.canvas(),e=window.innerWidth,s=window.innerHeight;t.width==e&&t.height==s||(t.width=e,t.height=s)}itemLogic(){this.items.forEach(t=>{t.physicStep(),t.onFrame.call(this,t)})}drawFrame(){const{width:t,height:e}=this.canvas();this.ctx.fillRect(0,0,t,e),this.items.forEach(t=>t.renderToCanvas())}get i(){return this.items}}